#include <iostream>
#include <vector>
using namespace std;

struct Task {
    string description;
    bool completed;
    Task(string desc) : description(desc), completed(false) {}
};

vector<Task> tasks;

void addTask() {
    string description;
    cout << "Enter the task description: ";
    cin.ignore();
    getline(cin, description);
    tasks.push_back(Task(description));
    cout << "Task added successfully." << endl;
}

void viewTasks() {
    if (tasks.empty()) {
        cout << "Task list is empty." << endl;
    } else {
        cout << "Tasks:" << endl;
        for (size_t i = 0; i < tasks.size(); i++) {
            cout << (i + 1) << ". ";
            if (tasks[i].completed)
                cout << "[X] ";
            else
                cout << "[ ] ";
            cout << tasks[i].description << endl;
        }
    }
}

void markTaskAsCompleted() {
    int taskIndex;
    cout << "Enter the task number to mark as completed: ";
    cin >> taskIndex;
    if (taskIndex >= 1 && taskIndex <= tasks.size()) {
        tasks[taskIndex - 1].completed = true;
        cout << "Task marked as completed." << endl;
    } else {
        cout << "Invalid task number." << endl;
    }
}

void removeTask() {
    int taskIndex;
    cout << "Enter the task number to remove: ";
    cin >> taskIndex;
    if (taskIndex >= 1 && taskIndex <= tasks.size()) {
        tasks.erase(tasks.begin() + taskIndex - 1);
        cout << "Task removed successfully." << endl;
    } else {
        cout << "Invalid task number." << endl;
    }
}

int main() {
    int choice;
    while (true) {
        cout << "\nTO-DO LIST" << endl;
        cout << "1. Add Task\n2. View Tasks\n3. Mark Task as Completed\n4. Remove Task" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addTask();
                break;
            case 2:
                viewTasks();
                break;
            case 3:
                markTaskAsCompleted();
                break;
            case 4:
                removeTask();
                break;
            default:
               exit(0);
        }
    }

    return 0;
}
